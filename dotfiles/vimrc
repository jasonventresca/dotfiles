" We set $HOME=$DOTFILES before running vim,
"   to trick vim into sourcing $DOTFILES/vimrc.
" Reset $HOME to the real home directory,
"   now that we're done importing config.
if !empty($REAL_HOME)
    let $HOME = $REAL_HOME
endif


imap jj <Esc>
nmap U <C-R>
cmap <C-O> <C-R>
set number
set cursorline
set backspace=indent,eol,start
set colorcolumn=101
hi ColorColumn ctermbg=Blue
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Ctrl-P settings
map ff :CtrlP<.><cr>
let g:ctrlp_user_command = 'find %s \( -path "*\.git/*" -o -path "*/node_modules/*" -o -path "*/__pycache__/*" -o -name "*.pyc" \) -prune -o -type f -print'

set tags=$HOME/.py-ctags

packadd! matchit

" Highlight search term without jumping to the next occurrence
" http://superuser.com/a/255120
map * :let @/ = '\<'.expand('<cword>').'\>'\|set hlsearch<C-M>
map g* :let @/ = expand('<cword>')\|set hlsearch<C-M>


" CtrlP settings
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_by_filename = 1


" Disabled this one because I couldn't type 'fl' (e.g. as in 'float') without calling Flake8 :)
" cmap fl call Flake8()

" From Carl - rebalance split-panes after window resizing and/or text display resizing
au VimResized * wincmd =

syntax enable


""" solarized color scheme
"set t_Co=16
"colorscheme solarized
"let g:solarized_termcolors=16
"set background=dark


""" molokai color scheme
set background=light


" https://github.com/tpope/vim-pathogen
execute pathogen#infect()

" set list " show invisible characters (e.g. linebreaks, tabs, etc.)

function! EnableCopyMode()
    set nonumber
    set nolist
endfunction

function! DisableCopyMode()
    set number
endfunction

""""""""""""""""" macros """""""""""""""""
" hyphenate notes
let @h = '0whhr-$l0'
" convert file from 2-space indents to 4-space indents
let @c = 's/^\( \+\)/\1\1/g'

" (Python) After you've yanked whatever expr into the default register (i.e. ^"),
"          insert a print line below to print the yanked expr's name and contents
let @p = 'A*&*&*jjp?*&*&*vhhhhdiprint "DEBUG: jjwy$A = {}".format(jjpA)jj0kw'
let @t = 'A*&*&*jjp?*&*&*vhhhhdiprint("DEBUG: jjwy$A = {}".format(jjpA))jj0kw'
let @i = 'veyoprint "DEBUG: jjpa:"for _ in jjpa:print "    {}".format(_)jjojj:€kb'
let @y = 'oimport pprintprint("DEBUG: jjpa:")pprint.pprint()jjhpa, indent=2€kb4jj0wkk'
let @j = 'oimport jsonprint("DEBUG: jjpa (JSON):")print(json.dumps(jjpA, indent=4, sort_keys=True))jj0wkk'

" Remove trailing whitespace - paste this into normal mode
let @w = ':%s/ \+$//gc'

" While resolving merge conflicts, search for merge markers
let @m = '/^\(<<<\|===\|>>>\)'

" Keep 25 lines above/below the cursor when scrolling
" set scrolloff=5

" When pressing left/right cursor keys at start/end of line, move to the previous/next line
set whichwrap+=<,>,h,l,[,]

highlight MyTodos guifg=red guibg=green
syntax match MyTodos /TODO/

highlight Folded ctermbg=Black

" Highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
" apply said highlighting upon opening a new buffer
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
" disable said highlighting while typing in insert mode
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=1000

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Add a bit extra margin to the left
set foldcolumn=1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

set smartindent
set backspace=indent,eol,start
inoremap # X<BS>#
" ^-- http://vim.wikia.com/wiki/Restoring_indent_after_typing_hash

set wrap "Wrap lines


" Augment vim configs for specific file extensions.
" For example, *.js files use 2-space indentation.
filetype plugin on

" Indenting for specific file extensions (currently unused?)
"filetype indent on


""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%


""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Quickly open a buffer for scripbble
map <leader>q :e ~/buffer<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.' . a:extra_filter)
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction


" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

function! StickyHeader()
    setlocal nowrap
    set cc=
    set scrollbind
    set scrollopt+=hor
    set scrollopt-=ver
    1 split
    wincmd j
endfunction

function! TsvEditor()
    execute "%!column -t -n -s '\t'"
    call StickyHeader()
endfunction

function! CsvEditor()
    execute "%!column -t -n -s ','"
    call StickyHeader()
endfunction


" Prevent <Esc> from deleting indentation
" See http://stackoverflow.com/a/10380793
" set autoindent
" set indentexpr=GetIndent()
"
" function GetIndent()
"    let lnum = prevnonblank(v:lnum - 1)
"    let ind = indent(lnum)
"    return ind
" endfunction


if &diff
    colorscheme torte
endif
