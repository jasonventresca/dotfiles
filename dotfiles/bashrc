export DOTFILES=$HOME/dotfiles.jason_ventresca/dotfiles

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'
fi

alias grep='grep --color=auto'
alias cgrep='grep --color=always'
alias grep_src_nojs="grep --include=\*.{py,sh,god,rb,mak,conf,crontab}"

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias lf='ll | grep "^-"' # files
alias ld='ll | grep "^d"' # directories


# some miscellaneous aliases
alias cdsp='cd /mnt/scrapepipeline/scrapepipeline'
alias cdc='cd /mnt/codename'
alias cdcm='cd /mnt/common'
alias cdsd='cd /mnt/search-deployment'
alias cdmt='cd /mnt/moat/search/tasks/mturk'
alias cdtp='cd /mnt/tagpipeline/tag_pipeline'
alias cdmb='cd /mnt/moatbot'
alias cdmq='cd /mnt/mqueue'
alias cdlog='cd /mnt/log/apache2'
alias cdpd='cd /usr/local/lib/python2.7/dist-packages/'
alias apacherestart='sudo /etc/init.d/apache2 restart'
alias bounce-codename='touch /mnt/codename/*.wsgi'
alias memcachedrestart='sudo /etc/init.d/memcached restart'
alias gencss='/mnt/codename/bin/generate_css.sh'
alias gencssa='/mnt/codename/bin/generate_css.sh; apacherestart'
alias toggle='. ~/toggle/toggle.sh'
alias instance_id='curl "http://169.254.169.254/latest/meta-data/instance-id"'
alias fact="elinks -dump randomfunfacts.com | sed -n '/^| /p' | tr -d \|"
alias tmux="TERM=screen-256color-bce tmux -f $DOTFILES/tmux.conf"
alias ufilext='xargs -n1 basename | cut -d. -f2 | sort | uniq' # unique file extensions among a list of file paths, e.g. $ grep -rl 'DBSession' $REPOS | ufilext
alias elb_hosts='source /mnt/common/keys/IAM-jason.ventresca-aws.sh ; /mnt/search-deployment/_common/elb_hosts.py'

# JSON pretty-print utility
alias jsonp='python -mjson.tool'

# cat file with syntax-highlighting. the -g attempts to guess the lexer from the file contents
alias pcat='pygmentize -g'

alias epoch='date +%s'

alias svc-which='ps aux | grep -i -e apache -e python -e couch -e memcache -e mysql -e postgres -e pgpool -e nrpe -e nagios -e nginx -e redis -e que -e ruby -e god -e redsocks -e vim -e emacs -e tmux -e rabbit'

# git aliases
alias git="HOME=$DOTFILES git"
alias gits='git status'
alias gitsa='pushd .; cdc; gits; cdsp; gits; popd;'
alias gitc='git commit -a'
alias gitco='git checkout'
alias gitd='git diff --find-renames'
alias gitds='git diff --staged --find-renames'
alias gitdh='git diff HEAD'

alias uc="/mnt/search-deployment/_common/update_code.py"
alias luc="/mnt/search-deployment/_common/local_update_code.py"

# some common mysql commands
alias mysql_hosts='cat /mnt/scrapepipeline/scrapepipeline/potato/moat_hosts/MYSQL_HOSTS.py'
alias mysql_search='mysql -h db.moat.co -u codename -pbigmoat126 search'
alias mysql_accounts='mysql -h codename-accounts.moat.co -u codename -pbigmoat126 codename_accounts'
alias box='cat /mnt/.box_name'

# ssh aliases
alias scp='scp -o PermitLocalCommand=no'
alias nssh='ssh -o PermitLocalCommand=no'
alias kill-ssh-agent='ps aux | grep ssh-agent | grep -v grep | awk "{print \$2}" | xargs sudo kill'
alias notes='cd ~/Dropbox/moat_notes && ls -lht | head -n20'
alias notes40='cd ~/Dropbox/moat_notes && ls -lht | head -n40'

# parallel-ssh/scp aliases
PSSH_ARGS='-v -p8 --timeout=10 -O PermitLocalCommand=no -O StrictHostKeyChecking=no'
alias pssh="parallel-ssh -i $PSSH_ARGS"
alias pscp="parallel-scp $PSSH_ARGS"
alias pssh-h="parallel-ssh -i $PSSH_ARGS -h ~/hosts"
alias pscp-h="parallel-scp $PSSH_ARGS -h ~/hosts"

editconfig() {
    # for editing dotfiles
    local config_file=$1
    vim $DOTFILES/$config_file
}

ssh_agent_ps=$(ps x | grep ssh-agent | grep -v grep | awk '{ print $1 }')
if [ "$ssh_agent_ps" == "" ]; then
   eval `ssh-agent -s`
else
   export SSH_AGENT_PID=$ssh_agent_ps
fi

ssh-add 
ssh-add ~/.ssh/id_rsa_github_personal
ssh-add ~/.ssh/mar-2011.pem
ssh-add ~/.ssh/nov-2010.pem
ssh-add ~/.ssh/moatbot.pem # this is "moat-deploy" user on git@github.com

# discover aliases
alias discover='/mnt/common/registry/discover.py'
alias discover-prod-ws='/mnt/common/registry/discover.py | grep codename-webserver | grep -i prod'
alias pls_ec2='source /mnt/common/keys/prod.sh ; /mnt/common/registry/ls_ec2.py'
alias bls_ec2='source /mnt/common/keys/bots.sh ; /mnt/common/registry/ls_ec2.py'
function als_ec2 () {
    # ls_ec2 for both aws@ and aws1@
    pls_ec2
    bls_ec2
}

# aliases for sourcing AWS IAM User keys
alias iam-jason0="source /mnt/common/keys/IAM-jason.ventresca-aws.sh"
alias iam-jason1="source /mnt/common/keys/IAM-jason.ventresca-aws1.sh"
alias iam-pro0="source /mnt/common/keys/moat.pro.box.sh"
alias iam-pro1="source /mnt/common/keys/moat.pro.box.aws1.sh"

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

if [ -f /mnt/common/scripts/glom.sh ]; then
    . /mnt/common/scripts/glom.sh master.bots
fi

# set vim as default editor for stuff like git commit messages
export VISUAL=vim
export EDITOR=vim
alias vim='REAL_HOME=$HOME HOME=$DOTFILES vim'
alias sudovim='sudo REAL_HOME=$HOME HOME=$DOTFILES vim'

alias repos-installed='echo -e "common\nsearch-deployment" | cat /dev/stdin /mnt/search-deployment/$(cat /mnt/.installed_role)/REPOS | cut -f 2 -d "/" | cut -f 1 -d "."'
alias repos-installed-paths='repos-installed | xargs -I{} echo /mnt/{}'
alias repos-branches='for repo in $(repos-installed) ; do cd /mnt/$repo ; echo "$repo : $(git branch | grep '"'"'^*'"'"' | cut -f 2 -d '"'"' '"'"' )" ; done'

alias remove_dd_agent='sudo apt-get remove datadog-agent -y'

# for working on the moatbot
alias start-moatbot-video='sudo god -c /mnt/search-deployment/moatbot-video/configs/moatbot-video.god'
alias stop-moatbot-video='sudo god terminate ; sleep 3 ; pkill -f chromedriver'

INPUTRC=$DOTFILES/inputrc

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

export GIT_AUTHOR_NAME=Jason Ventresca
export GIT_COMMITTER_NAME=Jason Ventresca
export GIT_COMMITTER_EMAIL=jasonventresca@gmail.com
export GIT_AUTHOR_EMAIL=jasonventresca@gmail.com

#echo ""
#whatis $(ls -1 /usr/share/man/man?/ | shuf -n1 | cut -d. -f1) || \ # Debian
#    whatis $(ls -1 /usr/share/man/man?/ | gshuf -n1 | cut -d. -f1) # Mac OS X
#echo ""

export REPOS='/mnt/scrapepipeline /mnt/codename /mnt/search-deployment /mnt/moatbot /mnt/tagpipeline /mnt/mqueue /mnt/common /mnt/mocktool /mnt/swfshots'

function ssh-reagent () {
    export SSH_AUTH_SOCK=$( find /tmp/ssh-* -user `whoami` -name agent\* -printf '%T@ %p\n' 2>/dev/null | \
                            sort -k 1 -nr | sed 's/^[^ ]* //' | head -n 1 )
    if ssh-add -l 2>&1 >/dev/null ; then
        echo "Found working SSH Agent:"
        ssh-add -l
    else 
        echo "Cannot find ssh agent - maybe you should reconnect and forward it?"
    fi
}

function pssh-results () {
    local results_file=$1 # e.g. ~/pssh.txt
    echo "success: $(grep -c SUCCESS $results_file)"
    echo "failure: $(grep -c FAILURE $results_file)"
}
